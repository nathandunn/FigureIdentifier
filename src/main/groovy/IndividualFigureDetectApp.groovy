import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.apache.commons.io.FileUtils
import org.bbop.inca.predictor.Predictor
import org.bbop.inca.predictor.SingleImagePredictor

/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */

class IndividualFigureDetectApp {

    static String evaluateFigures(){

        String[] extensions = ["tif","JPG"]
        File imageResources = new File("resources/figsharesingle")
        File[] files = FileUtils.listFiles(imageResources, extensions, false)
        Predictor predictor = new SingleImagePredictor()

        def targetJSON = new JsonSlurper().parse(new File("resources/figsharesingle/imageresult.json"))
        println "target json ${targetJSON}"

        def targetMap = [:]

        targetJSON.each(){
             targetMap.put(it.name,it.result)
        }

        def resultList = []
        Integer score = 0
        println "Files to evaluate ${files.length}"
        for (f in files) {
            def prediction = predictor.predict(f, 0.5)
            def result = [:]
            result.put("path",f.absolutePath)
            result.put("name",f.name)
            result.put("result",prediction.toString())
            result.put("score", targetMap.get(f.name)==prediction.toString() ? 1 : 0 )
            resultList.add(result)
            println "${f.absolutePath}  -> ${prediction.toString()} vs ${targetMap.get(f.name)} = ${result.score}"
            score += result.score
        }

        println "Score  ${score}/$files.length -> ${score / files.length * 100 }%"
        // create score
        File outputFile = new File("resources/figsharesingle/outputFile.json")
        outputFile.delete()
        outputFile.text = JsonOutput.toJson(resultList).toString()

        return outputFile.text
    }

    static void main(String[] args) {
        evaluateFigures()
    }

}
